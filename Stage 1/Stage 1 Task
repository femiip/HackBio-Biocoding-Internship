
""""""""""""""""""""""""""""""""""""""""""""""""""
#Task 1: Function for Translating DNA to protein
""""""""""""""""""""""""""""""""""""""""""""""""""
# mRNA codon table mapping codons to full amino acids
# Note: AUG is the start codon and also codes for Methionine.
# UAA, UAG, and UGA are stop codons

codon_table = {
    "AUG": "Methionine",
    "AUA": "Isoleucine",
    "AUC": "Isoleucine",
    "AUU": "Isoleucine",
    "ACA": "Threonine",
    "ACC": "Threonine",
    "ACG": "Threonine",
    "ACU": "Threonine",
    "AAC": "Asparagine",
    "AAU": "Asparagine",
    "AAA": "Lysine",
    "AAG": "Lysine",
    "AGC": "Serine",
    "AGU": "Serine",
    "AGA": "Arginine",
    "AGG": "Arginine",
    "CUA": "Leucine",
    "CUC": "Leucine",
    "CUG": "Leucine",
    "CUU": "Leucine",
    "CCA": "Proline",
    "CCC": "Proline",
    "CCG": "Proline",
    "CCU": "Proline",
    "CAC": "Histidine",
    "CAU": "Histidine",
    "CAA": "Glutamine",
    "CAG": "Glutamine",
    "CGA": "Arginine",
    "CGC": "Arginine",
    "CGG": "Arginine",
    "CGU": "Arginine",
    "GUA": "Valine",
    "GUC": "Valine",
    "GUG": "Valine",
    "GUU": "Valine",
    "GCA": "Alanine",
    "GCC": "Alanine",
    "GCG": "Alanine",
    "GCU": "Alanine",
    "GAC": "Aspartic Acid",
    "GAU": "Aspartic Acid",
    "GAA": "Glutamic Acid",
    "GAG": "Glutamic Acid",
    "GGA": "Glycine",
    "GGC": "Glycine",
    "GGG": "Glycine",
    "GGU": "Glycine",
    "UCA": "Serine",
    "UCC": "Serine",
    "UCG": "Serine",
    "UCU": "Serine",
    "UUC": "Phenylalanine",
    "UUU": "Phenylalanine",
    "UUA": "Leucine",
    "UUG": "Leucine",
    "UAC": "Tyrosine",
    "UAU": "Tyrosine",
    "UAA": "Stop",
    "UAG": "Stop",
    "UGA": "Stop",
    "UGC": "Cysteine",
    "UGU": "Cysteine",
    "UGG": "Tryptophan"
}

dna_sequence = "CTCAAAAGTCTAGAGCCACCGTCCAGGGAGCAGGTAGCTGCTGGGCTCCGGGGACACTTTGCGTTCGGGCTGGGAGCGTGCTTTCCACGACGGTGACACGCTTCCCTGGATTGGGTAAGCTCCTGACTGAACTTGATGAGTCCTCTCTGAGTCACGGGCTCTCGGCTCCGTGTATTTTCAGCTCGGGAAAATCGCTGGGGCTGGGGGTGGGGCAGTGGGGACTTAGCGAGTTTGGGGGTGAGTGGGATGGAAGCTTGGCTAGAGGGATCATCATAGGAGTTGCATTGTTGGGAGACCTGGGTGTAGATGATGGGGATGTTAGGACCATCCGAACTCAAAGTTGAACGCCT"

# step 1: transcription. this converts DNA to mRNA by replacing 'T' with 'U'.
mrna_sequence = dna_sequence.replace("T", "U")
print(f"mRNA Sequence: {mrna_sequence}")

# step 2: to identify the reading frame, we look for the first occurrence of the start codon "AUG".
start_index = mrna_sequence.find("AUG")
if start_index == -1:
    print("No start codon (AUG) found in the mRNA sequence.")
    exit()  # this ends the program if no start codon is found and prints the error message above
else:

# step 3: translation. this convert mRNA to a protein sequence. translation starts at the start codon and stops at the first stop codon.
    protein = ""
    for i in range(start_index, len(mrna_sequence) - 2, 3):
        codon = mrna_sequence[i:i+3]  # this gets a codon of 3 nucleotides.
        amino_acid = codon_table.get(codon, "Unknown")
        # if a stop codon is reached, this ends translation.
        if amino_acid == "Stop":
            break
        # use a hyphen to separate amino acid names.
        protein += amino_acid + "-"
 # this line removes the hyphen, if it exists at the end of the protein.
    if protein.endswith("-"):
        protein = protein[:-1]
# the final output is done using an f-string for neat formatting.
print(f"Protein Sequence: {protein}")



"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
#Task 2: Function for simulating logistic population growth curve
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
import math
def population(x , k = 2, x_mid = 5):
    solution = 1/(1 + math.exp(-k*(x-x_mid)))
    return solution
print(population(k = 2, x_mid = 5, x = 10))
od_600 = []
for i in range(0,24):
    od_600.append(population(x = i, k = 0.5, x_mid = 10))
print(od_600)


#the function to generate 100 different growth curves.
def generate_growth_curves(num_curves, time_points):
    curves = {}
    for i in range(num_curves):
        curve = simulate_logistic_curve(time_points)
        curves["Curve_" + str(i + 1)] = curve
    return curves


#the function to determine the time when the growth curve reaches 80% of the carrying capacity.
def time_to_reach_80_percent(time_points, growth_curve, K=1):
    threshold = 0.8 * K
    for i in range(len(time_points)):
        if growth_curve[i] >= threshold:
            return time_points[i]
    return None



"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
#Task 3: Function for calculating the Hamming distance between Slack username and Twitter username
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
def hamming_distance(slack, twitter):
    #the shorter string will be padded with spaces so both have the same length
    if len(slack) < len(twitter):
        slack = slack + " " * (len(twitter) - len(slack))
    elif len(twitter) < len(slack):
        twitter = twitter + " " * (len(slack) - len(twitter))
    
    # the counter for hamming distance is initialized as zero
    distance = 0
    #next, the function is looped for each character
    for i in range(len(slack)):
        if slack[i] != twitter[i]:
            distance += 1
    return distance

# slack and twitter usernames
slack_username = "Femi"
twitter_username = "femii_p"

# calculating and printing the final Hamming distance
result = hamming_distance(slack_username, twitter_username)
print("Hamming distance:", result)
